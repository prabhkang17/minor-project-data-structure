#include <stdio.h>
#include <stdlib.h>

// Structure for a process
typedef struct Process {  // typedef will help to define a new datatype process which is already a structure datatype 
    int id;               
    int burst_time;
    int remaining_time;
    struct Process* next;
} Process;

// Structure for Queue
typedef struct {
    Process* front;
    Process* rear;
} Queue;

// Function to create a new process
Process* createProcess(int id, int burst_time) {
    Process* newProcess = (Process*)malloc(sizeof(Process));
    newProcess->id = id;
    newProcess->burst_time = burst_time;
    newProcess->remaining_time = burst_time;
    newProcess->next = NULL;
    return newProcess;
}

// Function to initialize a queue
void initQueue(Queue* q) {
    q->front = q->rear = NULL;
}

// Function to check if queue is empty
int isEmpty(Queue* q) {
    return q->front == NULL;
}

// Function to enqueue a process
void enqueue(Queue* q, Process* p) {
    if (q->rear == NULL) {
        q->front = q->rear = p;
    } else {
        q->rear->next = p;
        q->rear = p;
    }
    p->next = NULL;
}

// Function to dequeue a process
Process* dequeue(Queue* q) {
    if (isEmpty(q)) return NULL;
    Process* temp = q->front;
    q->front = q->front->next;
    if (q->front == NULL) q->rear = NULL;
    return temp;
}

// Round Robin Scheduling function
void roundRobinScheduling(Queue* q, int time_quantum) {
    int time = 0;
    while (!isEmpty(q)) {
        Process* current = dequeue(q);
        if (current->remaining_time > time_quantum) {
            time += time_quantum;
            current->remaining_time -= time_quantum;
            printf("Process %d executed for %d units. Remaining time: %d\n", current->id, time_quantum, current->remaining_time);
            enqueue(q, current);
        } else {
            time += current->remaining_time;
            printf("Process %d executed for %d units and completed.\n", current->id, current->remaining_time);
            free(current);
        }
    }
    printf("All processes completed. Total time: %d\n", time);
}

int main() {
    Queue q;
    initQueue(&q);

    // Adding processes to the queue
    enqueue(&q, createProcess(1, 10));
    enqueue(&q, createProcess(2, 5));
    enqueue(&q, createProcess(3, 8));
    enqueue(&q, createProcess(4, 6));

    int time_quantum = 3;
    printf("Starting Round Robin Scheduling with Time Quantum = %d\n", time_quantum);
    roundRobinScheduling(&q, time_quantum);

    return 0;
}
